/**
 * @program: 2020.11.30
 * @description: 数据结构4
 * @author: spdz
 * @create: 2020-11-30 16:37
 **/

/**
 * 搜索
 *  静态搜索---相对不太变化的集合中搜索
 *      1.遍历搜索--O(n)
 *      2.二分查找及变形
 *  动态搜索---频繁增删的集合搜索
 *      1.搜索树
 *      2.哈希表
 */

/**
 * 搜索数（二叉搜索树）
 *  所有 左子树节点 都小于 根节点，所有 右子树节点 都大于 根节点
 *  中序有序
 *  通过平衡树来解决搜索树的最坏情况
 *      平衡树：AVL树/红黑树/B-树系列
 *          AVL树/红黑树：二叉平衡搜索树：数据全部保存在内存中
 *          B-树系列：多叉平衡搜索树：数据主要保存在硬盘中（数据库）
 */

/**
 * AVL树/红黑树
 *  AVL树：树上所有节点 左右子树的 高度差 不能超过 1（通常保存一个平衡因子）
 *      左左失衡--右旋   右右失衡--左旋   左右失衡--先左旋再右旋   右左失衡--先右旋再左旋
 *  红黑树：树的节点非红即黑，根节点必须是黑色，最后的叶子（null）统一看成黑色，
 *          红色不能相邻红色，从跟到所有叶子的路径上，黑色数量相同
 */

/**
 * Set ：特点：不允许元素重复，没有位置概念（只有线性表有前后关系）
 *  HashSet: 哈希表
 *  TreeSet: 红黑树
 * Map : 特点： 根据 key 可以映射到 value ，key 不可以重复
 */

/**
 * 哈希表 vs 搜索树
 *  1.效率略高
 *  2.实现简单 --》 容易做到线程安全
 *  3.搜索数保证 key 有序
 *      遍历 TreeMap ，key 有序，遍历 HashMap ，key 无序
 */

public class Demo {

}
